// This is your Prisma schema file
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String     @id
  name         String
  highlight    Boolean
  image        String
  products     Product[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    String
  updatedAt    String
  restaurantId String
}

model Ingredient {
  id                      String                    @id
  name                    String
  price                   Float
  image                   String
  quantity                Int?
  restaurant              Restaurant                @relation(fields: [restaurantId], references: [id])
  createdAt               String
  updatedAt               String
  restaurantId            String
  Product                 Product?                  @relation(fields: [productId], references: [id])
  productId               String?
  OrderIngredientsAdded   OrderIngredientsAdded[]
  OrderIngredientsRemoved OrderIngredientsRemoved[]
}

model Order {
  id           String          @id
  takeAway     Boolean
  orderNumber  Int?
  customerName String?
  finished     Boolean
  products     OrderProducts[]
  price        Float
  user         User?           @relation(fields: [userId], references: [id])
  userId       String?
  table        Table?          @relation(fields: [tableId], references: [id])
  tableId      String?
  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    String
  updatedAt    String
}

model OrderProducts {
  id                 String                    @id
  product            Product                   @relation(fields: [productId], references: [id])
  productId          String
  ingredientsAdded   OrderIngredientsAdded[]
  ingredientsRemoved OrderIngredientsRemoved[]
  Order              Order?                    @relation(fields: [orderId], references: [id])
  orderId            String?
}

model OrderIngredientsAdded {
  id              String         @id
  ingredient      Ingredient     @relation(fields: [ingredientId], references: [id])
  quantity        Int
  OrderProducts   OrderProducts? @relation(fields: [orderProductsId], references: [id])
  orderProductsId String?
  ingredientId    String
}

model OrderIngredientsRemoved {
  id              String         @id
  ingredient      Ingredient     @relation(fields: [ingredientId], references: [id])
  quantity        Int
  OrderProducts   OrderProducts? @relation(fields: [orderProductsId], references: [id])
  orderProductsId String?
  ingredientId    String
}

model Product {
  id            String          @id
  name          String
  price         Float
  description   String
  highlight     Boolean
  image         String
  ingredients   Ingredient[]
  category      Category        @relation(fields: [categoryId], references: [id])
  restaurant    Restaurant      @relation(fields: [restaurantId], references: [id])
  createdAt     String
  updatedAt     String
  orderId       String?
  categoryId    String
  restaurantId  String
  OrderProducts OrderProducts[]
}

model Restaurant {
  id          String       @id
  reference   Int
  telephone   Int
  email       String
  name        String
  address     String
  logo        String
  colorScheme Int
  createdAt   String
  updatedAt   String
  Category    Category[]
  Ingredient  Ingredient[]
  Order       Order[]
  Product     Product[]
  Review      Review[]
  Role        Role[]
  Table       Table[]
  User        User[]
}

model Review {
  id           String         @id
  responses    ReviewAnswer[]
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    String
  updatedAt    String
}

model ReviewQuestion {
  id           String         @id
  question     String
  ReviewAnswer ReviewAnswer[]
}

model ReviewAnswer {
  id               String         @id
  answer           String
  stars            Int
  question         ReviewQuestion @relation(fields: [reviewQuestionId], references: [id])
  reviewQuestionId String
  Review           Review?        @relation(fields: [reviewId], references: [id])
  reviewId         String?
}

model Role {
  id         String     @id
  name       String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  access     Access     @relation(fields: [accessId], references: [id])

  createdAt    String
  updatedAt    String
  restaurantId String
  accessId     String
  User         User[]
}

model Access {
  id                String  @id
  createRestaurants Boolean
  createUsers       Boolean
  createProducts    Boolean
  createCategories  Boolean
  createIngredients Boolean
  createOrders      Boolean
  createRoles       Boolean
  createTables      Boolean
  readRestaurants   Boolean
  readUsers         Boolean
  readProducts      Boolean
  readCategories    Boolean
  readIngredients   Boolean
  readOrders        Boolean
  readRoles         Boolean
  readTables        Boolean
  updateRestaurants Boolean
  updateUsers       Boolean
  updateProducts    Boolean
  updateCategories  Boolean
  updateIngredients Boolean
  updateOrders      Boolean
  updateRoles       Boolean
  updateTables      Boolean
  deleteRestaurants Boolean
  deleteUsers       Boolean
  deleteProducts    Boolean
  deleteCategories  Boolean
  deleteIngredients Boolean
  deleteOrders      Boolean
  deleteRoles       Boolean
  deleteTables      Boolean
  defineAccess      Boolean
  Role              Role[]
}

model Table {
  id           String     @id
  number       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    String
  updatedAt    String
  Order        Order[]
  restaurantId String
}

model User {
  id                    String                  @id
  name                  String
  email                 String                  @unique
  password              String
  image                 String?
  cellphone             Int?
  role                  Role?                   @relation(fields: [roleId], references: [id])
  restaurant            Restaurant              @relation(fields: [restaurantId], references: [id])
  createdAt             String
  updatedAt             String
  Order                 Order[]
  Review                Review[]
  roleId                String?
  restaurantId          String
  PasswordRecoveryToken PasswordRecoveryToken[]
}

model PasswordRecoveryToken {
  id     String @id
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
