// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId   String     @id @default(uuid())
  name         String     @unique
  highlight    Boolean
  image        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String

  products Product[]
}

model Ingredient {
  ingredientId String   @id @default(uuid())
  name         String   @unique
  price        Float
  image        String
  quantity     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [productId])
  productId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String
}

model Order {
  orderId      String   @id @default(uuid())
  takeAway     Boolean
  orderNumber  Float?
  customerName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products   Product @relation(fields: [productsId], references: [productId])
  productsId String

  user   User?  @relation(fields: [userId], references: [userId])
  userId String

  table   Table  @relation(fields: [tableId], references: [tableId])
  tableId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String
}

model Product {
  productId   String   @id @default(uuid())
  name        String   @unique
  price       Float
  description String
  highlight   Boolean
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order Order[]

  ingredients Ingredient[]

  category Category @relation(fields: [categoryId], references: [categoryId])
  categoryId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String
}

model Restaurant {
  restaurantId String       @id @default(uuid())
  telephone    Int          @unique
  email        String       @unique
  name         String       @unique
  adress       String       @unique
  logo         String
  colorScheme  Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  category     Category[]
  ingredient   Ingredient[]
  order        Order[]
  product      Product[]
  review       Review[]
  roles        Role[]
  tables       Table[]
}

model Review {
  reviewId  String   @id @default(uuid())
  stars     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [userId])
  userId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String
}

model Role {
  roleId String @id @default(uuid())
  name   String

  createRestaurants Boolean
  createUsers       Boolean
  createProducts    Boolean
  createCategories  Boolean
  createIngredients Boolean
  createOrders      Boolean
  createRoles       Boolean
  createTables      Boolean
  readRestaurants   Boolean
  readUsers         Boolean
  readProducts      Boolean
  readCategories    Boolean
  readIngredients   Boolean
  readOrders        Boolean
  readRoles         Boolean
  readTables        Boolean
  updateRestaurants Boolean
  updateUsers       Boolean
  updateProducts    Boolean
  updateCategories  Boolean
  updateIngredients Boolean
  updateOrders      Boolean
  updateRoles       Boolean
  updateTables      Boolean
  deleteRestaurants Boolean
  deleteUsers       Boolean
  deleteProducts    Boolean
  deleteCategories  Boolean
  deleteIngredients Boolean
  deleteOrders      Boolean
  deleteRoles       Boolean
  deleteTables      Boolean
  defineAccess      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String

  user User[]
}

model Table {
  tableId   String   @id @default(uuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String
}

model User {
  userId    String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  cellphone Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  review Review[]

  role   Role   @relation(fields: [roleId], references: [roleId])
  roleId String
}
